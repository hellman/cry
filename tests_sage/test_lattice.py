from cry.eq.lattice import Lattice
from cry.sagestuff import RR


def test_SECCON_2020_sharsable():
    from binteger import Bin

    # SECCON 2020 - sharsable
    n = 142793817321992828777925840162504083304079023834001118099549928854335392622287928254035247188624975743042449746066633491912316354241339908190889792327014012472372654378644158878787350693992259970146885854641856991605625756536504266728483088687985429310233421251081614258665472164668993082471923690196082829593  # noqa
    e1, c1 = [
        82815162880874815458042429141267540989513396527359063805652845923737062346339641683097075730151688566721221542188377672708478777831586255213972947470222613130635483227797717393291856129771004300757155687587305350059401683671715424063527610425941387424425367153041852997937972925839362190900175155479532582934, # noqa
        108072697038795075732704334514926058617161875495016327352871122917196026504758904760148391499245235850616838765611460630089577948665981247735905622903872682862860306107704253287284051312867625831877418240290183661755993649928399992531008191618616452091127799880839665225093055618092869662205901927957599941568,  # noqa
    ]
    e2, c2 = [
        84856171747859965508406237198459622554468224770252249975158471902036102010991476445962577679301719179079633469099994226630172251817358960347828156301869905575867853640850107406452911333646573296923235424617864473580743418995994067645338437540627399276292679100115018844287273293945121023787594592185295794983,  # noqa
        101960082023987498941061751761131381167414505957511290567652602520714324823481487410890478130601013005035303795327512367595187718926017321227779179404306882163521882309833982882201152721855538832465833869251505131262098978117904455226014402089126682222497271578420753565370375178303927777655414023662528363360,  # noqa
    ]

    m = Lattice([
        [e1, 1, 0],
        [e2, 0, 1],
        [n,  0, 0],
    ])
    m.set_bounds([n**0.66, n**0.16, n**0.16], precision=1)
    d1, d2 = m.LLL().apply_map(abs)[0][1:]
    msg = int(pow(c1, int(d1), n) * pow(c2, int(d2), n) % n)
    assert Bin(msg).bytes == b'SECCON{sh4r4bl3_r54_1s_useful?}'

    assert d1, d2 == m.BKZ().apply_map(abs)[0][1:]


def test_bound():
    from random import randrange
    for delta in (0.4, 0.5, 0.75, 0.9, 0.99):
        for n in (10, 20, 50, 100, 200, 256, 512, 1024, 2048):
            for d in (2, 3, 5, 10, 15):
                m = Lattice([
                    [randrange(2**n) for _ in range(d)]
                    for _ in range(d)
                ])
                m.set_bounds([2**randrange(n) for _ in range(d)], precision=1)
                bound = m.get_bound_LLL()
                ml = m.LLL()
                norm = int(RR(ml[0].norm()))
                print(
                    "delta", delta, "n", n, "d", d,
                    "logs:",
                    int(norm).bit_length(), "<?", int(bound).bit_length())
                assert norm <= bound + 1
